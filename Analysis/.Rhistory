classified_results
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
Estimate > 0 & `Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
))
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
Estimate > 0 & `Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
))
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
))
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
)) %>%
# Agora, agrupamos por número de segmentos, variável e sinal, mantendo as repetições
group_by(n_segments, Variable, sign, model_replication)
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
)) %>%
# Agora, agrupamos por número de segmentos, variável e sinal, mantendo as repetições
group_by(n_segments, Variable, sign, model_replication) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(percentage = count / 10 * 100)
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
)) %>%
# Agora, agrupamos por número de segmentos, variável e sinal, mantendo as repetições
group_by(n_segments, Variable, sign, model_replication) %>%
summarise(count = n(), .groups = "drop")
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign", # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo" # Significativo
)) %>%
# Agora, agrupamos por número de segmentos, variável e sinal, mantendo as repetições
group_by(n_segments, Variable, sign, model_replication) %>%
summarise(count = n(), .groups = "drop")
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign)
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop")
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
group_by(n_segments, Variable)
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
# group_by(n_segments, Variable) %>%
mutate(total = sum(count),  # Total de repetições para cada número de segmentos e variável
proportion = count / total * 100)
simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
group_by(n_segments, Variable) %>%
mutate(total = sum(count),  # Total de repetições para cada número de segmentos e variável
proportion = count / total * 100)
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, fill = sign)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
fill = "Significado") +
theme_minimal(base_size = 14)
# Classificar os coeficientes e manter os resultados de cada repetição
classified_results <- simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
group_by(n_segments, Variable) %>%
mutate(total = sum(count),  # Total de repetições para cada número de segmentos e variável
proportion = count / total * 100)
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, fill = sign)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
fill = "Significado") +
theme_minimal(base_size = 14)
# Dados principais
data <- read.csv(here::here("Analysis", "roadkill_records.csv"), sep = ";", header = TRUE)
# Resumindo os atropelamentos por segmento e ano
roadkills <- data %>%
group_by(year, segment) %>%
summarize(roadkills = n(), .groups = 'drop')
# Segmentos de cluster e áreas protegidas
clusters <- c(44, 44.5, 45, 45.5, 46, 46.5,
50,
59.5, 60)
clusters_side <- c(43.5, 47, 49.5, 50.5, 59, 60.5)
ucs <- c(seq(11, 14, by = 0.5),
seq(20, 27.5, by = 0.5),
seq(28, 42, by = 0.5))
# Filtrando segmentos de controle disponíveis
controls <- seq(11, 67.5, by = 0.5)
control_ALLsegments <- data %>%
filter(segment %in% controls,
!segment %in% clusters,
!segment %in% clusters_side) %>%
pull(segment) %>%
unique() %>%
sort()
years <- 2004:2017
# Definir tamanhos de amostra para simulação
n_segments <- seq(2, 98, by = 10)  # de 2 a 98 segmentos
simulate_by_sample_size <- function(sample_size, n_replicas) {  # Alterando o número de réplicas para 100
set.seed(123)  # Para garantir reprodutibilidade
results <- tibble()
for (i in 1:n_replicas) {
# Selecionar aleatoriamente os segmentos de controle
control_segments <- sample(control_ALLsegments, size = sample_size, replace = FALSE)
# Filtrar os dados de controle
roadkills_control <- expand.grid(year = years, segment = control_segments) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(
roadkills = tidyr::replace_na(roadkills, 0),
type = "control"
)
# Criar dados de impacto
roadkills_impact <- expand.grid(year = years, segment = clusters) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(roadkills = tidyr::replace_na(roadkills, 0), type = "impact")
# Combinar os dados
complete_data <- bind_rows(roadkills_control, roadkills_impact)
# Ajustar o modelo GLM
glm_model <- glm.nb(roadkills ~ type * year, data = complete_data)
# Extrair os coeficientes
coefficients <- summary(glm_model)$coefficients %>%
as.data.frame() %>%
rownames_to_column(var = "Variable") %>%
mutate(n_segments = sample_size, model_replication = i, control_segments = paste(control_segments, collapse = ", "))
# Armazenar os resultados
results <- bind_rows(results, coefficients)
}
return(results)
}
# Rodar a simulação para todos os tamanhos de amostra com 100 repetições
simulation_results <- map_dfr(n_segments, ~simulate_by_sample_size(.x, n_replicas = 10))
library(dplyr)    # Para manipulação de dados
library(tidyr)    # Para substituir valores ausentes
library(ggplot2)  # Para visualização de gráficos
library(tibble)   # Para trabalhar com tibbles
library(purrr)    # Para funções de mapeamento
library(MASS)     # Para glm.nb (modelo de regressão negativo binomial)
library(here)
# Dados principais
data <- read.csv(here::here("Analysis", "roadkill_records.csv"), sep = ";", header = TRUE)
# Resumindo os atropelamentos por segmento e ano
roadkills <- data %>%
group_by(year, segment) %>%
summarize(roadkills = n(), .groups = 'drop')
# Segmentos de cluster e áreas protegidas
clusters <- c(44, 44.5, 45, 45.5, 46, 46.5,
50,
59.5, 60)
clusters_side <- c(43.5, 47, 49.5, 50.5, 59, 60.5)
ucs <- c(seq(11, 14, by = 0.5),
seq(20, 27.5, by = 0.5),
seq(28, 42, by = 0.5))
# Filtrando segmentos de controle disponíveis
controls <- seq(11, 67.5, by = 0.5)
control_ALLsegments <- data %>%
filter(segment %in% controls,
!segment %in% clusters,
!segment %in% clusters_side) %>%
pull(segment) %>%
unique() %>%
sort()
years <- 2004:2017
# Definir tamanhos de amostra para simulação
n_segments <- seq(2, 98, by = 10)  # de 2 a 98 segmentos
simulate_by_sample_size <- function(sample_size, n_replicas) {  # Alterando o número de réplicas para 100
set.seed(123)  # Para garantir reprodutibilidade
results <- tibble()
for (i in 1:n_replicas) {
# Selecionar aleatoriamente os segmentos de controle
control_segments <- sample(control_ALLsegments, size = sample_size, replace = FALSE)
# Filtrar os dados de controle
roadkills_control <- expand.grid(year = years, segment = control_segments) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(
roadkills = tidyr::replace_na(roadkills, 0),
type = "control"
)
# Criar dados de impacto
roadkills_impact <- expand.grid(year = years, segment = clusters) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(roadkills = tidyr::replace_na(roadkills, 0), type = "impact")
# Combinar os dados
complete_data <- bind_rows(roadkills_control, roadkills_impact)
# Ajustar o modelo GLM
glm_model <- glm.nb(roadkills ~ type * year, data = complete_data)
# Extrair os coeficientes
coefficients <- summary(glm_model)$coefficients %>%
as.data.frame() %>%
rownames_to_column(var = "Variable") %>%
mutate(n_segments = sample_size, model_replication = i, control_segments = paste(control_segments, collapse = ", "))
# Armazenar os resultados
results <- bind_rows(results, coefficients)
}
return(results)
}
# Rodar a simulação para todos os tamanhos de amostra com 100 repetições
simulation_results <- map_dfr(n_segments, ~simulate_by_sample_size(.x, n_replicas = 10))
# Verifique o resumo dos resultados
head(simulation_results)
# Classificar os coeficientes e manter os resultados de cada repetição
classified_results <- simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
group_by(n_segments, Variable) %>%
mutate(total = sum(count),  # Total de repetições para cada número de segmentos e variável
proportion = count / total * 100)
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, fill = sign)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
fill = "Significado") +
theme_minimal(base_size = 14)
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, color = sign, group = sign)) +
geom_line(size = 1.1) +  # Usando geom_line para criar um gráfico de linha
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
color = "Significado") +
theme_minimal(base_size = 14)
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, color = sign, group = sign)) +
geom_line(linewidth = 1.1) +  # Usando geom_line para criar um gráfico de linha
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
color = "Significado") +
theme_minimal(base_size = 14)
# Dados principais
data <- read.csv(here::here("Analysis", "roadkill_records.csv"), sep = ";", header = TRUE)
# Resumindo os atropelamentos por segmento e ano
roadkills <- data %>%
group_by(year, segment) %>%
summarize(roadkills = n(), .groups = 'drop')
# Segmentos de cluster e áreas protegidas
clusters <- c(44, 44.5, 45, 45.5, 46, 46.5,
50,
59.5, 60)
clusters_side <- c(43.5, 47, 49.5, 50.5, 59, 60.5)
ucs <- c(seq(11, 14, by = 0.5),
seq(20, 27.5, by = 0.5),
seq(28, 42, by = 0.5))
# Filtrando segmentos de controle disponíveis
controls <- seq(11, 67.5, by = 0.5)
control_ALLsegments <- data %>%
filter(segment %in% controls,
!segment %in% clusters,
!segment %in% clusters_side) %>%
pull(segment) %>%
unique() %>%
sort()
years <- 2004:2017
# Definir tamanhos de amostra para simulação
n_segments <- seq(2, 98, by = 10)  # de 2 a 98 segmentos
simulate_by_sample_size <- function(sample_size, n_replicas) {  # Alterando o número de réplicas para 100
set.seed(123)  # Para garantir reprodutibilidade
results <- tibble()
for (i in 1:n_replicas) {
# Selecionar aleatoriamente os segmentos de controle
control_segments <- sample(control_ALLsegments, size = sample_size, replace = FALSE)
# Filtrar os dados de controle
roadkills_control <- expand.grid(year = years, segment = control_segments) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(
roadkills = tidyr::replace_na(roadkills, 0),
type = "control"
)
# Criar dados de impacto
roadkills_impact <- expand.grid(year = years, segment = clusters) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(roadkills = tidyr::replace_na(roadkills, 0), type = "impact")
# Combinar os dados
complete_data <- bind_rows(roadkills_control, roadkills_impact)
# Ajustar o modelo GLM
glm_model <- glm.nb(roadkills ~ type * year, data = complete_data)
# Extrair os coeficientes
coefficients <- summary(glm_model)$coefficients %>%
as.data.frame() %>%
rownames_to_column(var = "Variable") %>%
mutate(n_segments = sample_size, model_replication = i, control_segments = paste(control_segments, collapse = ", "))
# Armazenar os resultados
results <- bind_rows(results, coefficients)
}
return(results)
}
# Rodar a simulação para todos os tamanhos de amostra com 100 repetições
simulation_results <- map_dfr(n_segments, ~simulate_by_sample_size(.x, n_replicas = 100))
# Verifique o resumo dos resultados
head(simulation_results)
# Classificar os coeficientes e manter os resultados de cada repetição
classified_results <- simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
group_by(n_segments, Variable) %>%
mutate(total = sum(count),  # Total de repetições para cada número de segmentos e variável
proportion = count / total * 100)
classified_results
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, color = sign, group = sign)) +
geom_line(linewidth = 1.1) +  # Usando geom_line para criar um gráfico de linha
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
color = "Significado") +
theme_minimal(base_size = 14)
# Dados principais
data <- read.csv(here::here("Analysis", "roadkill_records.csv"), sep = ";", header = TRUE)
# Resumindo os atropelamentos por segmento e ano
roadkills <- data %>%
group_by(year, segment) %>%
summarize(roadkills = n(), .groups = 'drop')
# Segmentos de cluster e áreas protegidas
clusters <- c(44, 44.5, 45, 45.5, 46, 46.5,
50,
59.5, 60)
clusters_side <- c(43.5, 47, 49.5, 50.5, 59, 60.5)
ucs <- c(seq(11, 14, by = 0.5),
seq(20, 27.5, by = 0.5),
seq(28, 42, by = 0.5))
# Filtrando segmentos de controle disponíveis
controls <- seq(11, 67.5, by = 0.5)
control_ALLsegments <- data %>%
filter(segment %in% controls,
!segment %in% clusters,
!segment %in% clusters_side) %>%
pull(segment) %>%
unique() %>%
sort()
years <- 2004:2017
# Definir tamanhos de amostra para simulação
n_segments <- seq(2, 98, by = 10)  # de 2 a 98 segmentos
simulate_by_sample_size <- function(sample_size, n_replicas) {  # Alterando o número de réplicas para 100
set.seed(123)  # Para garantir reprodutibilidade
results <- tibble()
for (i in 1:n_replicas) {
# Selecionar aleatoriamente os segmentos de controle
control_segments <- sample(control_ALLsegments, size = sample_size, replace = FALSE)
# Filtrar os dados de controle
roadkills_control <- expand.grid(year = years, segment = control_segments) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(
roadkills = tidyr::replace_na(roadkills, 0),
type = "control"
)
# Criar dados de impacto
roadkills_impact <- expand.grid(year = years, segment = clusters) %>%
left_join(roadkills, by = c("segment", "year")) %>%
mutate(roadkills = tidyr::replace_na(roadkills, 0), type = "impact")
# Combinar os dados
complete_data <- bind_rows(roadkills_control, roadkills_impact)
# Ajustar o modelo GLM
glm_model <- glm.nb(roadkills ~ type * year, data = complete_data)
# Extrair os coeficientes
coefficients <- summary(glm_model)$coefficients %>%
as.data.frame() %>%
rownames_to_column(var = "Variable") %>%
mutate(n_segments = sample_size, model_replication = i, control_segments = paste(control_segments, collapse = ", "))
# Armazenar os resultados
results <- bind_rows(results, coefficients)
}
return(results)
}
# Rodar a simulação para todos os tamanhos de amostra com 100 repetições
simulation_results <- map_dfr(n_segments, ~simulate_by_sample_size(.x, n_replicas = 1000))
# Verifique o resumo dos resultados
head(simulation_results)
# Classificar os coeficientes e manter os resultados de cada repetição
classified_results <- simulation_results %>%
mutate(sign = case_when(
`Pr(>|z|)` >= 0.05 ~ "non-sign",  # Não significativo
`Pr(>|z|)` < 0.05 ~ "significativo"  # Significativo
)) %>%
group_by(n_segments, Variable, sign) %>%
summarise(count = n(), .groups = "drop") %>%
# Calcular a proporção de significativos e não significativos
group_by(n_segments, Variable) %>%
mutate(total = sum(count),  # Total de repetições para cada número de segmentos e variável
proportion = count / total * 100)
# Gráfico das proporções significativas e não significativas
ggplot(classified_results, aes(x = n_segments, y = proportion, color = sign, group = sign)) +
geom_line(linewidth = 1.1) +  # Usando geom_line para criar um gráfico de linha
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Proporção de Repetições Significativas e Não Significativas",
x = "Número de Segmentos",
y = "Proporção (%)",
color = "Significado") +
theme_minimal(base_size = 14)
View(simulation_results)
## Run and save simulations
# to run in parallel
plan(multisession)
??plan
## Create a netlogo object
# indicate netlogo program path
nl_folder <- file.path("C:/Program Files/NetLogo 6.0.4")
# indicate netlogo code and other informations
nl_crossings <- nlrx::nl(nlversion = "6.0.4",
nlpath = nl_folder,
modelpath = here::here("netlogo_code" , "crossings_simulations.nlogo"),
jvmmem = 1024)
print(nl_crossings)
## Add parameters values to an experiment
# inspect the model available model parameters:
nlrx::report_model_parameters(nl_crossings)
# define model paremeters values
nl_crossings@experiment <- nlrx::experiment(expname = "sobol2007",
outpath = here::here(),
repetition = 1,
tickmetrics = "false",
idsetup = "setup",
idgo = "go",
runtime = 0,
stopcond = "ticks = steps",
evalticks = NA_integer_,
metrics = c("total_crossings",
"assess_top_sections"),
variables = list("matrix_permeability" = list(min = 10, max = 90, qfun = "qunif"),
"perceptual_range" = list(min = 5, max = 42, qfun = "qunif"),
"vision_angle" = list(min = 90, max = 180, qfun = "qunif"),
"scenario" = list(min = 1, max = 7, qfun = "qunif")))
# inspect parameters that will not vary
nlrx::eval_variables_constants(nl_crossings)
## Define a sensitivity design to create the sample of the parameters
nl_crossings@simdesign <- nlrx::simdesign_sobol2007(nl = nl_crossings,
samples = 10000,
sobolnboot = 300,
sobolconf = 0.95,
nseeds = 1,
precision = 0)
nl_crossings@simdesign
# inspect the netlogo object which will have parameters values to run the simulations
print(nl_crossings)
## Run and save simulations
# to run in parallel
plan(multisession)
progressr::handlers("progress")
## Run and save simulations
# to run in parallel
future::plan(multisession)
## Run and save simulations
# to run in parallel
plan(future::multisession)
## Run and save simulations
# to run in parallel
future::plan("multisession")
progressr::handlers("progress")
